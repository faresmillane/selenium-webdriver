pipeline {
    agent {
        label 'tools-qa'
    }
    environment {
        BASE_URL = ""
        WS_URL = ""
        CHROME = ""
        FIREFOX = ""
        MOBILE = ""
        API = ""
    }
    options {
        disableConcurrentBuilds()
    }
    parameters {
        choice(name: 'RAKQA_ENV', choices: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', 'preview', 'production'], description: 'on which environment ?')
        choice(name: 'SEND_NOTIF', choices: ['no', 'yes'])
    } 
    stages {
         stage("Preparation & install"){
            steps{
            script {
                	wrap([$class: 'BuildUser']) {
                    try {
                        if ("${BUILD_USER_FIRST_NAME}"){
                	        currentBuild.displayName = "Started by ${BUILD_USER_FIRST_NAME}"
                        }
                    } catch (Exception e) {
                        currentBuild.displayName = "Started by timer"
                    }
                    }
                    if ("${RAKQA_ENV}" == 'preview'){
                        BASE_URL = "https://preview.fr.shopping.rakuten.com"
                        WS_URL = "https://ws4.rakqa.fr"
                    } else if ("${RAKQA_ENV}" == 'production'){
                        BASE_URL = "https://fr.shopping.rakuten.com"
                        WS_URL = "https://ws4.rakqa.fr"
                    } else {
                        BASE_URL = "https://www${RAKQA_ENV}.rakqa.fr"
                        WS_URL = "https://ws${RAKQA_ENV}.rakqa.fr"
                    }
               }
               echo "Preparation & install dependencies ..."
               sh '''
                    export PATH=/usr/local/bin:$PATH
                    pwd
                    node -v
                    npm ci
               '''
               echo "Preparation & installation : Done"
            }
         }
         stage("Run tests"){
             steps {   
                 script {
                     try { 
                        parallel(
                            'Chrome': {
                                echo "chrome tests started ..."
                                if ("${RAKQA_ENV}" == 'preview' || "${RAKQA_ENV}" == 'production'){
                                    sh "HEADLESS=true BASE_URL=${BASE_URL} DRIVER=chrome ./node_modules/.bin/cucumber-js tests/features/sanity/web-site/navigation.feature"
                                } else {
                                    sh "HEADLESS=true BASE_URL=${BASE_URL} DRIVER=chrome npm run test:web:sanity"
                                }
                                echo "chrome tests : Done"
                            },
                            'Firefox': {
                                echo "firefox tests started ..."
                                if ("${RAKQA_ENV}" == 'preview' || "${RAKQA_ENV}" == 'production'){
                                    sh "HEADLESS=true BASE_URL=${BASE_URL} DRIVER=firefox ./node_modules/.bin/cucumber-js tests/features/sanity/web-site/navigation.feature"
                                } else {
                                    sh "HEADLESS=true BASE_URL=${BASE_URL} DRIVER=firefox npm run test:web:sanity"
                                }
                                echo "firefox tests : Done"
                            },
                            'Mobile': {
                                echo "mobile tests started ..."
                                if ("${RAKQA_ENV}" == 'preview' || "${RAKQA_ENV}" == 'production'){
                                    sh "HEADLESS=true BASE_URL=${BASE_URL} DRIVER=mobile ./node_modules/.bin/cucumber-js tests/features/sanity/mob-site/navigation.feature"
                                } else {
                                    sh "HEADLESS=true BASE_URL=${BASE_URL} DRIVER=mobile npm run test:mob:sanity"
                                }
                                echo "mobile tests : Done"
                            },
                            'Web-service': {
                                echo "mobile tests started ..."
                                if ("${RAKQA_ENV}" == 'preview' || "${RAKQA_ENV}" == 'production'){
                                    sh "HEADLESS=true WS_URL=${WS_URL} DRIVER=api ./node_modules/.bin/cucumber-js tests/features/sanity/api/health.check.feature"
                                } else {
                                    sh "HEADLESS=true WS_URL=${WS_URL} DRIVER=api npm run test:api:sanity"
                                }
                                echo "web-service tests : Done"
                            }
                        )
                    }
                    catch (Exception e) {
                        if(manager.logContains("tests failed")) {
                            currentBuild.result = 'UNSTABLE'
                            return
                        } else {
                            currentBuild.result = 'SUCCESS'
                            return
                        }
                    }
                }
            }
        }
        stage("Status"){
            steps{
            script {
                    sh'''
                        DRIVER=chrome node resources/status.js
                        DRIVER=firefox node resources/status.js
                        DRIVER=mobile node resources/status.js
                        DRIVER=api node resources/status.js
                    '''
                    if(manager.logContains("chrome tests failed")) {
                        CHROME = 'FAILED'
                    } else {
                        CHROME = 'PASSED'
                    }
                    if(manager.logContains("firefox tests failed")) {
                        FIREFOX = 'FAILED'
                    } else {
                        FIREFOX = 'PASSED'
                    }
                    if(manager.logContains("mobile tests failed")) {
                        MOBILE = 'FAILED'
                    } else {
                        MOBILE = 'PASSED'
                    }
                    if(manager.logContains("api tests failed")) {
                        API = 'FAILED'
                    } else {
                        API = 'PASSED'
                    }
                    wrap([$class: 'BuildUser']) {
                        currentBuild.description = "Chrome: ${CHROME} - Firefox: ${FIREFOX} <br> Mobile: ${MOBILE} - API: ${API}"  
                    }
               }
            }
         }
    } 
    post {
        always {
            echo "generating report..."
                archiveArtifacts artifacts: 'reports/warnings.json', fingerprint: true
                cucumber buildStatus: 'UNSTABLE',
                    reportTitle: 'firefox report',
                    fileIncludePattern: 'reports/cucumber-report-firefox.json',
                    trendsLimit: 10,
                    classifications: [
                        [
                            'key': 'Browser',
                            'value': 'Firefox'
                        ]
                    ]
                cucumber buildStatus: 'UNSTABLE',
                    reportTitle: 'chrome report',
                    fileIncludePattern: 'reports/cucumber-report-chrome.json',
                    trendsLimit: 10,
                    classifications: [
                        [
                            'key': 'Browser',
                            'value': 'Chrome'
                        ]
                    ]
                cucumber buildStatus: 'UNSTABLE',
                    reportTitle: 'mobile report',
                    fileIncludePattern: 'reports/cucumber-report-mobile.json',
                    trendsLimit: 10,
                    classifications: [
                        [
                            'key': 'Browser',
                            'value': 'Chrome mobile'
                        ]
                    ]
                cucumber buildStatus: 'UNSTABLE',
                    reportTitle: 'web-service report',
                    fileIncludePattern: 'reports/cucumber-report-api.json',
                    trendsLimit: 10,
                    classifications: [
                        [
                            'key': 'Mode',
                            'value': 'REST API'
                        ]
                    ]
                }
            cleanup {
                deleteDir()
        }
    }
}